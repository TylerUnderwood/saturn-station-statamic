
// ███████╗██╗     ██╗   ██╗██╗██████╗     ████████╗██╗   ██╗██████╗ ███████╗
// ██╔════╝██║     ██║   ██║██║██╔══██╗    ╚══██╔══╝╚██╗ ██╔╝██╔══██╗██╔════╝
// █████╗  ██║     ██║   ██║██║██║  ██║       ██║    ╚████╔╝ ██████╔╝█████╗  
// ██╔══╝  ██║     ██║   ██║██║██║  ██║       ██║     ╚██╔╝  ██╔═══╝ ██╔══╝  
// ██║     ███████╗╚██████╔╝██║██████╔╝       ██║      ██║   ██║     ███████╗
// ╚═╝     ╚══════╝ ╚═════╝ ╚═╝╚═════╝        ╚═╝      ╚═╝   ╚═╝     ╚══════╝
// FLUID TYPE

@function strip-unit($number) {
  @if type-of($number) == "number" and not unitless($number) {
    @return $number / ($number * 0 + 1);
  }

  @return $number;
}

@mixin fluid-value($properties, $min_vw, $max_vw, $min_value, $max_value) {
  @media ( max-width: #{$min_vw} ) {
    @each $property in $properties {
      #{$property}: $min_value;
    }
  }
  @media ( min-width: $min_vw ) and ( max-width: #{$max_vw - 1} ) {
    @each $property in $properties {
      #{$property}: calc(#{$min_value} + #{strip-unit($max_value - $min_value)} * (100vw - #{$min_vw}) / #{strip-unit($max_vw - $min_vw)});
    }
  }
  @media ( min-width: #{$max_vw} ) {
    @each $property in $properties {
      #{$property}: $max_value;
    }
  }
}



//  █████╗ ██████╗ ██████╗     ██████╗ ██████╗ ███████╗ █████╗ ██╗  ██╗██████╗  ██████╗ ██╗███╗   ██╗████████╗███████╗
// ██╔══██╗██╔══██╗██╔══██╗    ██╔══██╗██╔══██╗██╔════╝██╔══██╗██║ ██╔╝██╔══██╗██╔═══██╗██║████╗  ██║╚══██╔══╝██╔════╝
// ███████║██║  ██║██║  ██║    ██████╔╝██████╔╝█████╗  ███████║█████╔╝ ██████╔╝██║   ██║██║██╔██╗ ██║   ██║   ███████╗
// ██╔══██║██║  ██║██║  ██║    ██╔══██╗██╔══██╗██╔══╝  ██╔══██║██╔═██╗ ██╔═══╝ ██║   ██║██║██║╚██╗██║   ██║   ╚════██║
// ██║  ██║██████╔╝██████╔╝    ██████╔╝██║  ██║███████╗██║  ██║██║  ██╗██║     ╚██████╔╝██║██║ ╚████║   ██║   ███████║
// ╚═╝  ╚═╝╚═════╝ ╚═════╝     ╚═════╝ ╚═╝  ╚═╝╚══════╝╚═╝  ╚═╝╚═╝  ╚═╝╚═╝      ╚═════╝ ╚═╝╚═╝  ╚═══╝   ╚═╝   ╚══════╝
// ADD BREAKPOINTS

// Make All Classes in the Breakpoints list
@mixin add-breakpoint-prefixes( $breakpointsList: $breakpoints ) {
  @each $point, $width in $breakpointsList {
    @media ( min-width: #{$width} ) {
      .#{$point}\: {
        @content;
      }
    }
  }
}

// Make All Classes In a SCSS list
@mixin make-classes-from-list( $class, $properties, $list ) {
  @each $key, $value in $list {
    .#{$class}-#{$key} {
      @each $property in $properties {
        #{$property}: $value;
      }
      @content;
    }
  }
}

// This is the same as the make all mixin but it is expected to be inside the addBreakpointPrefixes mixin
@mixin make-classes-from-list-for-prefixes( $class, $properties, $list ) {
  @each $key, $value in $list {
    &#{$class}-#{$key} {
      @each $property in $properties {
        #{$property}: $value;
      }
      @content;
    }
  }
}

@mixin make-list-of-classes-from-list( $classList, $varList, $defaultVar ) {
  @each $className, $properties in $classList {
    @if $defaultVar {
      // make the default class
      .#{$className} {
        @each $property in $properties {
          #{$property}: $defaultVar;
        }
      }
    }
    @if $varList {
      // make classes from list
      @include make-classes-from-list( $className, $properties, $varList );
    }
  }
}

@mixin make-list-of-classes-from-list-for-prefixes( $classList, $varList, $defaultVar ) {
  @each $className, $properties in $classList {
    // make default class inside breakpoints
    @if $defaultVar {
      // make the default class
      &#{$className} {
        @each $property in $properties {
          #{$property}: $defaultVar;
        }
      }
    }
    // make classes from list inside breakpoints
    @include make-classes-from-list-for-prefixes( $className, $properties, $varList );
  }
}

@mixin make-classes-from-object( $object ) {
  @each $class, $rules in $object {
    .#{$class} {
      @each $rule, $type in $rules {
        #{$rule}: #{$type};
      }
    }
  }
};

@mixin make-classes-from-object-for-prefixes( $object ) {
  @each $class, $rules in $object {
    &#{$class} {
      @each $rule, $type in $rules {
        #{$rule}: #{$type};
      }
    }
  }
};

// This makes classes that are prefixed, separated by a colon
@mixin make-prefixed-classes-from-list( $prefix, $rule, $list ) {
  @each $key, $value in $list {
    .#{$prefix}\:#{$key} {
      #{$rule}: $value;
    }
  }
}


// ██████╗ ███████╗███████╗██████╗  ██████╗ ███╗   ██╗███████╗██╗██╗   ██╗███████╗███╗   ██╗███████╗███████╗███████╗
// ██╔══██╗██╔════╝██╔════╝██╔══██╗██╔═══██╗████╗  ██║██╔════╝██║██║   ██║██╔════╝████╗  ██║██╔════╝██╔════╝██╔════╝
// ██████╔╝█████╗  ███████╗██████╔╝██║   ██║██╔██╗ ██║███████╗██║██║   ██║█████╗  ██╔██╗ ██║█████╗  ███████╗███████╗
// ██╔══██╗██╔══╝  ╚════██║██╔═══╝ ██║   ██║██║╚██╗██║╚════██║██║╚██╗ ██╔╝██╔══╝  ██║╚██╗██║██╔══╝  ╚════██║╚════██║
// ██║  ██║███████╗███████║██║     ╚██████╔╝██║ ╚████║███████║██║ ╚████╔╝ ███████╗██║ ╚████║███████╗███████║███████║
// ╚═╝  ╚═╝╚══════╝╚══════╝╚═╝      ╚═════╝ ╚═╝  ╚═══╝╚══════╝╚═╝  ╚═══╝  ╚══════╝╚═╝  ╚═══╝╚══════╝╚══════╝╚══════╝
// Responsiveness

// Author: Glenn McComb
// Site: https://glennmccomb.com/articles/useful-sass-scss-media-query-mixins-for-bootstrap/
//
// Update: Tyler Underwood
// Notes: I added functionality for variables or numbers used in the mixin.
// 		  So that, we were not confined to using variables in the breakpoints map.


//––––––––––––––––––––––––––––––––––––––––––––––––––
//  RESPOND ABOVE
//––––––––––––––––––––––––––––––––––––––––––––––––––

// @include above(sm) {}
@mixin above($breakpoint) {

  // If the breakpoint exists in the map.
  @if map-has-key($breakpoints, $breakpoint) {

    // Get the breakpoint value.
    $breakpoint-value: map-get($breakpoints, $breakpoint);

    // Write the media query.
    @media ( min-width: $breakpoint-value ) {
      @content;
    }

  // Tyler: added else statement for any variables or numbers 
  } @else if type-of($breakpoint) == "number" {

    @media ( min-width: $breakpoint ) {
      @content;
    }

  // If the breakpoint doesn't exist in the map.
  } @else {

    // Log a warning.
    @warn 'Invalid breakpoint: #{$breakpoint}.';
  }
}


//––––––––––––––––––––––––––––––––––––––––––––––––––
//  RESPOND BELOW
//––––––––––––––––––––––––––––––––––––––––––––––––––

// @include below(sm) {}
@mixin below($breakpoint) {

  // If the breakpoint exists in the map.
  @if map-has-key($breakpoints, $breakpoint) {

    // Get the breakpoint value.
    $breakpoint-value: map-get($breakpoints, $breakpoint);

    // Write the media query.
    @media (max-width: ($breakpoint-value - 1)) {
      @content;
    }

  // Tyler: added else statement for any variables or numbers 
  } @else if type-of($breakpoint) == "number" {

    @media (max-width: ($breakpoint - 1)) {
      @content;
    }

  // If the breakpoint doesn't exist in the map.
  } @else {

    // Log a warning.
    @warn 'Invalid breakpoint: #{$breakpoint}.';
  }
}


//––––––––––––––––––––––––––––––––––––––––––––––––––
//  RESPOND BETWEEN
//––––––––––––––––––––––––––––––––––––––––––––––––––

// @include between(sm, md) {}
@mixin between($lower, $upper) {

  // If both the lower and upper breakpoints exist in the map.
  @if map-has-key($breakpoints, $lower) and map-has-key($breakpoints, $upper) {

  // Get the lower and upper breakpoints.
  $lower_breakpoint: map-get($breakpoints, $lower);
  $upper_breakpoint: map-get($breakpoints, $upper);

  // Write the media query.
  @media (min-width: $lower_breakpoint) and (max-width: ($upper_breakpoint - 1)) {
    @content;
  }

  // Tyler: added else statement for any variables or numbers 
  } @else if type-of($lower) == "number" and type-of($upper) == "number" {

    @media (min-width: $lower) and (max-width: ($upper - 1)) {
      @content;
    }

  // Tyler: added else statement for any variables or numbers 
  } @else if type-of($lower) == "number" {

    $upper_breakpoint: map-get($breakpoints, $upper);

    @media (min-width: $lower) and (max-width: ($upper_breakpoint - 1)) {
      @content;
    }

  // Tyler: added else statement for any variables or numbers 
  } @else if type-of($upper) == "number" {

    $lower_breakpoint: map-get($breakpoints, $lower);

    @media (min-width: $lower_breakpoint) and (max-width: ($upper - 1)) {
      @content;
    }

  // If one or both of the breakpoints don't exist.
  } @else {

    // If lower breakpoint is invalid.
    @if (map-has-key($breakpoints, $lower) == false) {

      // Log a warning.
      @warn 'Your lower breakpoint was invalid: #{$lower}.';
    }

    // If upper breakpoint is invalid.
    @if (map-has-key($breakpoints, $upper) == false) {

      // Log a warning.
      @warn 'Your upper breakpoint was invalid: #{$upper}.';
    }
  }
}
